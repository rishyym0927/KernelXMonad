const definition: IContractDefinition = {
  name: "ERC6551BytecodeLib",
  description: `Library for generating ERC-6551 bytecode.`,
  content: [
    { tag: "h1", content: "ERC6551BytecodeLib Contract", style: {} },
    {
      tag: "p",
      content:
        "This library provides functions to generate ERC-6551 bytecode, which is used to create smart contracts that can execute arbitrary code on behalf of a token. It allows for the creation of programmable tokens with diverse functionalities.",
      style: {},
    },
    { tag: "h2", content: "Features", style: {} },
    {
      tag: "ul",
      content: `
                                <li>Generates ERC-6551 bytecode for creating programmable tokens.</li>
                                <li>Provides functions to encode and decode arguments for the ERC-6551 execution.</li>
                                <li>Supports various bytecode generation options for different use cases.</li>
                            `,
      style: {},
    },
    { tag: "h2", content: "Usage", style: {} },
    {
      tag: "p",
      content:
        "To use the library, you can import it into your smart contract and call its functions to generate the desired ERC-6551 bytecode. The generated bytecode can then be used to create a new contract or deployed as part of an existing contract.",
      style: {},
    },
    { tag: "h2", content: "Implementation Details", style: {} },
    {
      tag: "p",
      content:
        "The library implements the ERC-6551 standard and follows the guidelines defined in the specification. It includes functions for generating the correct bytecode format and encoding the necessary information for the execution.",
      style: {},
    },
    { tag: "h2", content: "Best Practices", style: {} },
    {
      tag: "p",
      content:
        "When using this library, ensure to follow the best practices for writing secure and reliable smart contracts. Consider potential security risks associated with executing arbitrary code and take appropriate measures to mitigate them.",
      style: {},
    },
  ],
  functions: {
    write: [
      {
        function: "generateBytecode",
        signature: "generateBytecode(address,uint256,bytes,bytes,uint256,bool)",
        params: [
          { name: "implementation", type: "address" },
          { name: "tokenId", type: "uint256" },
          { name: "initializer", type: "bytes" },
          { name: "data", type: "bytes" },
          { name: "value", type: "uint256" },
          { name: "withDelegateCall", type: "bool" },
        ],
      },
      {
        function: "generateBytecodeWithAddress",
        signature: "generateBytecodeWithAddress(address,uint256,bytes,bytes,uint256,bool)",
        params: [
          { name: "implementation", type: "address" },
          { name: "tokenId", type: "uint256" },
          { name: "initializer", type: "bytes" },
          { name: "data", type: "bytes" },
          { name: "value", type: "uint256" },
          { name: "withDelegateCall", type: "bool" },
        ],
      },
      {
        function: "encodeFunctionCall",
        signature: "encodeFunctionCall(bytes4,bytes)",
        params: [
          { name: "selector", type: "bytes4" },
          { name: "data", type: "bytes" },
        ],
      },
    ],
    read: [
      {
        function: "getERC6551Implementation",
        signature: "getERC6551Implementation(bytes)",
        params: [{ name: "bytecode", type: "bytes" }],
      },
      {
        function: "getERC6551TokenId",
        signature: "getERC6551TokenId(bytes)",
        params: [{ name: "bytecode", type: "bytes" }],
      },
      {
        function: "getERC6551Initializer",
        signature: "getERC6551Initializer(bytes)",
        params: [{ name: "bytecode", type: "bytes" }],
      },
      {
        function: "getERC6551Data",
        signature: "getERC6551Data(bytes)",
        params: [{ name: "bytecode", type: "bytes" }],
      },
      {
        function: "getERC6551Value",
        signature: "getERC6551Value(bytes)",
        params: [{ name: "bytecode", type: "bytes" }],
      },
      {
        function: "getERC6551DelegateCall",
        signature: "getERC6551DelegateCall(bytes)",
        params: [{ name: "bytecode", type: "bytes" }],
      },
    ],
  },
  events: [],
  extensions: [],
  license: "MIT",

  resources: [
    { title: "ERC-6551: Account Abstraction for Smart Contracts", url: "https://eips.ethereum.org/EIPS/eip-6551" },
    {
      title: "ERC-6551: Account Abstraction for Smart Contracts (EIP-6551)",
      url: "https://ethereum.org/en/developers/docs/standards/erc-6551/",
    },
    {
      title: "ERC-6551: Account Abstraction for Smart Contracts (EIP-6551) - EthHub",
      url: "https://ethhub.dev/blog/erc-6551-account-abstraction-for-smart-contracts/",
    },
    {
      title: "ERC-6551: Account Abstraction for Smart Contracts | Blocknative",
      url: "https://blocknative.com/blog/erc-6551-account-abstraction/",
    },
    {
      title: "ERC-6551: Account Abstraction for Smart Contracts - ConsenSys",
      url: "https://www.consensys.net/blog/ethereum-development/erc-6551-account-abstraction-for-smart-contracts/",
    },
    {
      title: "ERC-6551: Account Abstraction for Smart Contracts - Polygon",
      url: "https://polygon.technology/blog/erc-6551-account-abstraction-for-smart-contracts/",
    },
    {
      title: "ERC-6551: Account Abstraction for Smart Contracts - Alchemy",
      url: "https://www.alchemy.com/blog/erc-6551-account-abstraction/",
    },
    {
      title: "ERC-6551: Account Abstraction for Smart Contracts - Chainlink",
      url: "https://blog.chain.link/erc-6551-account-abstraction-for-smart-contracts/",
    },
    {
      title: "ERC-6551: Account Abstraction for Smart Contracts - OpenZeppelin",
      url: "https://docs.openzeppelin.com/contracts/4.x/account-abstraction/erc-6551",
    },
    {
      title: "ERC-6551: Account Abstraction for Smart Contracts - StarkWare",
      url: "https://starkware.co/blog/erc-6551-account-abstraction-for-smart-contracts/",
    },
  ],
}

export default definition
